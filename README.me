# Simple STL

## Introduction

The Simple STL project is a custom implementation of the Standard Template Library (STL) containers in C++. It aims to provide a simplified and educational version of common STL containers, including sequential containers, container adapters, and unordered containers. This project is designed for learning purposes and to demonstrate the implementation of fundamental data structures in C++.

## Directory Structure

The project is organized into the following directories:

- **Sequential Containers**: Includes implementations of `vector`, `list`, `forward_list`, `deque`, and `array`.
- **Container Adapters**: Includes implementations of `queue`, `stack`, and `priority_queue`.
- **Unordered Containers**: Includes implementations of `unordered_set`, `unordered_map`, `unordered_multiset`, and `unordered_multimap`.

## Container Descriptions

- **Sequential Containers**: These containers store elements in a linear sequence. They include dynamic arrays (`vector`), linked lists (`list`, `forward_list`), and fixed-size arrays (`array`).
- **Container Adapters**: These are wrappers around other containers that provide a specific interface, such as LIFO (`stack`) and FIFO (`queue`) access.
- **Unordered Containers**: These containers store elements in a hash table, allowing for fast retrieval based on keys. They include `unordered_set` and `unordered_map`.

## Key Features

- **Dynamic Size Management**: Containers like `vector` and `list` can grow or shrink as needed.
- **Efficient Access and Modification**: Provides efficient methods for accessing and modifying elements.
- **Custom Allocator Support**: Some containers support custom allocators for memory management.
- **Iterator Support**: Iterators are provided for traversing container elements.

## Usage Examples

### Vector Example
```cpp
#include "vector.h"
#include <iostream>

int main() {
    custom::vector<int> myVector;
    myVector.push_back(10);
    myVector.push_back(20);
    std::cout << "Vector elements: ";
    for (int val : myVector) {
        std::cout << val << " ";
    }
    return 0;
}
```

### List Example
```cpp
#include "list.h"
#include <iostream>

int main() {
    custom::list<int> myList;
    myList.push_back(10);
    myList.push_front(5);
    std::cout << "List elements: ";
    for (int val : myList) {
        std::cout << val << " ";
    }
    return 0;
}
```

### Queue Example
```cpp
#include "queue.h"
#include <iostream>

int main() {
    custom::queue<int> myQueue;
    myQueue.push(10);
    myQueue.push(20);
    std::cout << "Queue front: " << myQueue.front() << std::endl;
    return 0;
}
```

## Future Enhancements

- **Advanced Features**: Implement additional STL features such as `emplace` methods and allocator awareness.
- **Performance Optimization**: Optimize the performance of certain operations and improve memory management.
- **Comprehensive Testing**: Expand test coverage to ensure robustness and correctness of all container operations.

This readme provides a high-level overview of the Simple STL project and its components. For detailed information on each container, refer to the individual readme files located in their respective directories.

## Usage

To use any of the data structures, simply import the corresponding module and create an instance of the data structure. Detailed usage instructions are provided in the respective module files.

## Contributing

Contributions are welcome! Please read the [contributing guidelines](CONTRIBUTING.md) before submitting a pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
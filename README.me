# Advanced Data Structures

This repository contains C++ 17 and later implementations and explanations of various advanced and probabilistic data structures. These data structures are essential for solving complex computational problems efficiently.

## Table of Contents

- [Introduction](#introduction)
- [Data Structures](#data-structures)
    - [Trie](#trie)
    - [Segment Tree](#segment-tree)
    - [Fenwick Tree (Binary Indexed Tree)](#fenwick-tree-binary-indexed-tree)
    - [Bloom Filter](#bloom-filter)
    - [Skip List](#skip-list)
    - [Suffix Array](#suffix-array)
    - [K-D Tree](#k-d-tree)
- [Usage](#usage)
- [Contributing](#contributing)
- [License](#license)

## Introduction

This repository is a collection of advanced data structures that are often used in competitive programming, machine learning, and other areas of computer science. Each data structure is implemented in Python and includes a detailed explanation of its usage and complexity.

## Data Structures

### Trie

A Trie is a tree-like data structure used to store a dynamic set of strings, where the keys are usually strings. It is used for efficient retrieval of a key in a dataset of strings.

### Segment Tree

A Segment Tree is a data structure used for storing information about intervals or segments. It allows querying which of the stored segments contain a given point efficiently.

### Fenwick Tree (Binary Indexed Tree)

A Fenwick Tree or Binary Indexed Tree is a data structure that provides efficient methods for calculation and manipulation of the prefix sums of a table of values.

### Bloom Filter

A Bloom Filter is a probabilistic data structure that is used to test whether an element is a member of a set. It is highly space-efficient but allows for false positives.

### Skip List

A Skip List is a data structure that allows fast search within an ordered sequence of elements. It is built on multiple layers of linked lists.

### Suffix Array

A Suffix Array is a sorted array of all suffixes of a string. It is used in a variety of string processing algorithms.

### K-D Tree

A K-D Tree (k-dimensional tree) is a space-partitioning data structure for organizing points in a k-dimensional space. It is useful for nearest neighbor searches.

## Usage

To use any of the data structures, simply import the corresponding module and create an instance of the data structure. Detailed usage instructions are provided in the respective module files.

## Contributing

Contributions are welcome! Please read the [contributing guidelines](CONTRIBUTING.md) before submitting a pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.